// automatically generated by the FlatBuffers compiler, do not modify



use crate::common::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sf {

  use crate::common::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ATTRIBUTE_MAP_MODE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ATTRIBUTE_MAP_MODE: u8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ATTRIBUTE_MAP_MODE: [AttributeMapMode; 3] = [
  AttributeMapMode::eNone,
  AttributeMapMode::eByVertex,
  AttributeMapMode::eByIndex,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AttributeMapMode(pub u8);
#[allow(non_upper_case_globals)]
impl AttributeMapMode {
  pub const eNone: Self = Self(0);
  pub const eByVertex: Self = Self(1);
  pub const eByIndex: Self = Self(2);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::eNone,
    Self::eByVertex,
    Self::eByIndex,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::eNone => Some("eNone"),
      Self::eByVertex => Some("eByVertex"),
      Self::eByIndex => Some("eByIndex"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for AttributeMapMode {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AttributeMapMode {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for AttributeMapMode {
    type Output = AttributeMapMode;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for AttributeMapMode {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AttributeMapMode {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AttributeMapMode {}
// struct TriangleIndexTuple, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct TriangleIndexTuple(pub [u8; 12]);
impl Default for TriangleIndexTuple { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl std::fmt::Debug for TriangleIndexTuple {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("TriangleIndexTuple")
      .field("idx0", &self.idx0())
      .field("idx1", &self.idx1())
      .field("idx2", &self.idx2())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TriangleIndexTuple {}
impl flatbuffers::SafeSliceAccess for TriangleIndexTuple {}
impl<'a> flatbuffers::Follow<'a> for TriangleIndexTuple {
  type Inner = &'a TriangleIndexTuple;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a TriangleIndexTuple>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a TriangleIndexTuple {
  type Inner = &'a TriangleIndexTuple;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<TriangleIndexTuple>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for TriangleIndexTuple {
    type Output = TriangleIndexTuple;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const TriangleIndexTuple as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b TriangleIndexTuple {
    type Output = TriangleIndexTuple;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const TriangleIndexTuple as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for TriangleIndexTuple {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl<'a> TriangleIndexTuple {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    idx0: i32,
    idx1: i32,
    idx2: i32,
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_idx0(idx0);
    s.set_idx1(idx1);
    s.set_idx2(idx2);
    s
  }

  pub fn idx0(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_idx0(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn idx1(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_idx1(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn idx2(&self) -> i32 {
    let mut mem = core::mem::MaybeUninit::<i32>::uninit();
    unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[8..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<i32>(),
      );
      mem.assume_init()
    }.from_little_endian()
  }

  pub fn set_idx2(&mut self, x: i32) {
    let x_le = x.to_little_endian();
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const i32 as *const u8,
        self.0[8..].as_mut_ptr(),
        core::mem::size_of::<i32>(),
      );
    }
  }

  pub fn unpack(&self) -> TriangleIndexTupleT {
    TriangleIndexTupleT {
      idx0: self.idx0(),
      idx1: self.idx1(),
      idx2: self.idx2(),
    }
  }
}

#[derive(Debug, Clone, PartialEq, Default)]
pub struct TriangleIndexTupleT {
  pub idx0: i32,
  pub idx1: i32,
  pub idx2: i32,
}
impl TriangleIndexTupleT {
  pub fn pack(&self) -> TriangleIndexTuple {
    TriangleIndexTuple::new(
      self.idx0,
      self.idx1,
      self.idx2,
    )
  }
}

pub enum MeshTexCoordsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MeshTexCoords<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MeshTexCoords<'a> {
    type Inner = MeshTexCoords<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> MeshTexCoords<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MeshTexCoords { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MeshTexCoordsArgs<'args>) -> flatbuffers::WIPOffset<MeshTexCoords<'bldr>> {
      let mut builder = MeshTexCoordsBuilder::new(_fbb);
      if let Some(x) = args.texCoords { builder.add_texCoords(x); }
      builder.add_texCoordMapMode(args.texCoordMapMode);
      builder.finish()
    }

    pub fn unpack(&self) -> MeshTexCoordsT {
      let texCoords = self.texCoords().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let texCoordMapMode = self.texCoordMapMode();
      MeshTexCoordsT {
        texCoords,
        texCoordMapMode,
      }
    }
    pub const VT_TEXCOORDS: flatbuffers::VOffsetT = 4;
    pub const VT_TEXCOORDMAPMODE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn texCoords(&self) -> Option<&'a [Vec2d]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vec2d>>>(MeshTexCoords::VT_TEXCOORDS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn texCoordMapMode(&self) -> AttributeMapMode {
    self._tab.get::<AttributeMapMode>(MeshTexCoords::VT_TEXCOORDMAPMODE, Some(AttributeMapMode::eNone)).unwrap()
  }
}

impl flatbuffers::Verifiable for MeshTexCoords<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vec2d>>>(&"texCoords", Self::VT_TEXCOORDS, false)?
     .visit_field::<AttributeMapMode>(&"texCoordMapMode", Self::VT_TEXCOORDMAPMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct MeshTexCoordsArgs<'a> {
    pub texCoords: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vec2d>>>,
    pub texCoordMapMode: AttributeMapMode,
}
impl<'a> Default for MeshTexCoordsArgs<'a> {
    #[inline]
    fn default() -> Self {
        MeshTexCoordsArgs {
            texCoords: None,
            texCoordMapMode: AttributeMapMode::eNone,
        }
    }
}
pub struct MeshTexCoordsBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MeshTexCoordsBuilder<'a, 'b> {
  #[inline]
  pub fn add_texCoords(&mut self, texCoords: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vec2d>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshTexCoords::VT_TEXCOORDS, texCoords);
  }
  #[inline]
  pub fn add_texCoordMapMode(&mut self, texCoordMapMode: AttributeMapMode) {
    self.fbb_.push_slot::<AttributeMapMode>(MeshTexCoords::VT_TEXCOORDMAPMODE, texCoordMapMode, AttributeMapMode::eNone);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MeshTexCoordsBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MeshTexCoordsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MeshTexCoords<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for MeshTexCoords<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("MeshTexCoords");
      ds.field("texCoords", &self.texCoords());
      ds.field("texCoordMapMode", &self.texCoordMapMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MeshTexCoordsT {
  pub texCoords: Option<Vec<Vec2dT>>,
  pub texCoordMapMode: AttributeMapMode,
}
impl Default for MeshTexCoordsT {
  fn default() -> Self {
    Self {
      texCoords: None,
      texCoordMapMode: AttributeMapMode::eNone,
    }
  }
}
impl MeshTexCoordsT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<MeshTexCoords<'b>> {
    let texCoords = self.texCoords.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    let texCoordMapMode = self.texCoordMapMode;
    MeshTexCoords::create(_fbb, &MeshTexCoordsArgs{
      texCoords,
      texCoordMapMode,
    })
  }
}
pub enum MeshPrimitiveOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MeshPrimitive<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MeshPrimitive<'a> {
    type Inner = MeshPrimitive<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> MeshPrimitive<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MeshPrimitive { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MeshPrimitiveArgs<'args>) -> flatbuffers::WIPOffset<MeshPrimitive<'bldr>> {
      let mut builder = MeshPrimitiveBuilder::new(_fbb);
      builder.add_materialIdx(args.materialIdx);
      if let Some(x) = args.otherTexCoord { builder.add_otherTexCoord(x); }
      if let Some(x) = args.roughMetalTexCoord { builder.add_roughMetalTexCoord(x); }
      if let Some(x) = args.normalTexCoord { builder.add_normalTexCoord(x); }
      if let Some(x) = args.specularTexCoord { builder.add_specularTexCoord(x); }
      if let Some(x) = args.ambientTexCoord { builder.add_ambientTexCoord(x); }
      if let Some(x) = args.diffuseTexCoord { builder.add_diffuseTexCoord(x); }
      if let Some(x) = args.triangles { builder.add_triangles(x); }
      if let Some(x) = args.normals { builder.add_normals(x); }
      if let Some(x) = args.vertexs { builder.add_vertexs(x); }
      builder.add_normalMapMode(args.normalMapMode);
      builder.finish()
    }

    pub fn unpack(&self) -> MeshPrimitiveT {
      let vertexs = self.vertexs().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let normals = self.normals().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let triangles = self.triangles().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let normalMapMode = self.normalMapMode();
      let diffuseTexCoord = self.diffuseTexCoord().map(|x| {
        Box::new(x.unpack())
      });
      let ambientTexCoord = self.ambientTexCoord().map(|x| {
        Box::new(x.unpack())
      });
      let specularTexCoord = self.specularTexCoord().map(|x| {
        Box::new(x.unpack())
      });
      let normalTexCoord = self.normalTexCoord().map(|x| {
        Box::new(x.unpack())
      });
      let roughMetalTexCoord = self.roughMetalTexCoord().map(|x| {
        Box::new(x.unpack())
      });
      let otherTexCoord = self.otherTexCoord().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let materialIdx = self.materialIdx();
      MeshPrimitiveT {
        vertexs,
        normals,
        triangles,
        normalMapMode,
        diffuseTexCoord,
        ambientTexCoord,
        specularTexCoord,
        normalTexCoord,
        roughMetalTexCoord,
        otherTexCoord,
        materialIdx,
      }
    }
    pub const VT_VERTEXS: flatbuffers::VOffsetT = 4;
    pub const VT_NORMALS: flatbuffers::VOffsetT = 6;
    pub const VT_TRIANGLES: flatbuffers::VOffsetT = 8;
    pub const VT_NORMALMAPMODE: flatbuffers::VOffsetT = 10;
    pub const VT_DIFFUSETEXCOORD: flatbuffers::VOffsetT = 12;
    pub const VT_AMBIENTTEXCOORD: flatbuffers::VOffsetT = 14;
    pub const VT_SPECULARTEXCOORD: flatbuffers::VOffsetT = 16;
    pub const VT_NORMALTEXCOORD: flatbuffers::VOffsetT = 18;
    pub const VT_ROUGHMETALTEXCOORD: flatbuffers::VOffsetT = 20;
    pub const VT_OTHERTEXCOORD: flatbuffers::VOffsetT = 22;
    pub const VT_MATERIALIDX: flatbuffers::VOffsetT = 24;

  #[inline]
  pub fn vertexs(&self) -> Option<&'a [Vec3d]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vec3d>>>(MeshPrimitive::VT_VERTEXS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn normals(&self) -> Option<&'a [Vec3d]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vec3d>>>(MeshPrimitive::VT_NORMALS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn triangles(&self) -> Option<&'a [TriangleIndexTuple]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TriangleIndexTuple>>>(MeshPrimitive::VT_TRIANGLES, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn normalMapMode(&self) -> AttributeMapMode {
    self._tab.get::<AttributeMapMode>(MeshPrimitive::VT_NORMALMAPMODE, Some(AttributeMapMode::eNone)).unwrap()
  }
  #[inline]
  pub fn diffuseTexCoord(&self) -> Option<MeshTexCoords<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(MeshPrimitive::VT_DIFFUSETEXCOORD, None)
  }
  #[inline]
  pub fn ambientTexCoord(&self) -> Option<MeshTexCoords<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(MeshPrimitive::VT_AMBIENTTEXCOORD, None)
  }
  #[inline]
  pub fn specularTexCoord(&self) -> Option<MeshTexCoords<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(MeshPrimitive::VT_SPECULARTEXCOORD, None)
  }
  #[inline]
  pub fn normalTexCoord(&self) -> Option<MeshTexCoords<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(MeshPrimitive::VT_NORMALTEXCOORD, None)
  }
  #[inline]
  pub fn roughMetalTexCoord(&self) -> Option<MeshTexCoords<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(MeshPrimitive::VT_ROUGHMETALTEXCOORD, None)
  }
  #[inline]
  pub fn otherTexCoord(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MeshTexCoords<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MeshTexCoords>>>>(MeshPrimitive::VT_OTHERTEXCOORD, None)
  }
  #[inline]
  pub fn materialIdx(&self) -> u64 {
    self._tab.get::<u64>(MeshPrimitive::VT_MATERIALIDX, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for MeshPrimitive<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vec3d>>>(&"vertexs", Self::VT_VERTEXS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vec3d>>>(&"normals", Self::VT_NORMALS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TriangleIndexTuple>>>(&"triangles", Self::VT_TRIANGLES, false)?
     .visit_field::<AttributeMapMode>(&"normalMapMode", Self::VT_NORMALMAPMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(&"diffuseTexCoord", Self::VT_DIFFUSETEXCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(&"ambientTexCoord", Self::VT_AMBIENTTEXCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(&"specularTexCoord", Self::VT_SPECULARTEXCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(&"normalTexCoord", Self::VT_NORMALTEXCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<MeshTexCoords>>(&"roughMetalTexCoord", Self::VT_ROUGHMETALTEXCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<MeshTexCoords>>>>(&"otherTexCoord", Self::VT_OTHERTEXCOORD, false)?
     .visit_field::<u64>(&"materialIdx", Self::VT_MATERIALIDX, false)?
     .finish();
    Ok(())
  }
}
pub struct MeshPrimitiveArgs<'a> {
    pub vertexs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vec3d>>>,
    pub normals: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vec3d>>>,
    pub triangles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TriangleIndexTuple>>>,
    pub normalMapMode: AttributeMapMode,
    pub diffuseTexCoord: Option<flatbuffers::WIPOffset<MeshTexCoords<'a>>>,
    pub ambientTexCoord: Option<flatbuffers::WIPOffset<MeshTexCoords<'a>>>,
    pub specularTexCoord: Option<flatbuffers::WIPOffset<MeshTexCoords<'a>>>,
    pub normalTexCoord: Option<flatbuffers::WIPOffset<MeshTexCoords<'a>>>,
    pub roughMetalTexCoord: Option<flatbuffers::WIPOffset<MeshTexCoords<'a>>>,
    pub otherTexCoord: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<MeshTexCoords<'a>>>>>,
    pub materialIdx: u64,
}
impl<'a> Default for MeshPrimitiveArgs<'a> {
    #[inline]
    fn default() -> Self {
        MeshPrimitiveArgs {
            vertexs: None,
            normals: None,
            triangles: None,
            normalMapMode: AttributeMapMode::eNone,
            diffuseTexCoord: None,
            ambientTexCoord: None,
            specularTexCoord: None,
            normalTexCoord: None,
            roughMetalTexCoord: None,
            otherTexCoord: None,
            materialIdx: 0,
        }
    }
}
pub struct MeshPrimitiveBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MeshPrimitiveBuilder<'a, 'b> {
  #[inline]
  pub fn add_vertexs(&mut self, vertexs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vec3d>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_VERTEXS, vertexs);
  }
  #[inline]
  pub fn add_normals(&mut self, normals: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vec3d>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_NORMALS, normals);
  }
  #[inline]
  pub fn add_triangles(&mut self, triangles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TriangleIndexTuple>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_TRIANGLES, triangles);
  }
  #[inline]
  pub fn add_normalMapMode(&mut self, normalMapMode: AttributeMapMode) {
    self.fbb_.push_slot::<AttributeMapMode>(MeshPrimitive::VT_NORMALMAPMODE, normalMapMode, AttributeMapMode::eNone);
  }
  #[inline]
  pub fn add_diffuseTexCoord(&mut self, diffuseTexCoord: flatbuffers::WIPOffset<MeshTexCoords<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MeshTexCoords>>(MeshPrimitive::VT_DIFFUSETEXCOORD, diffuseTexCoord);
  }
  #[inline]
  pub fn add_ambientTexCoord(&mut self, ambientTexCoord: flatbuffers::WIPOffset<MeshTexCoords<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MeshTexCoords>>(MeshPrimitive::VT_AMBIENTTEXCOORD, ambientTexCoord);
  }
  #[inline]
  pub fn add_specularTexCoord(&mut self, specularTexCoord: flatbuffers::WIPOffset<MeshTexCoords<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MeshTexCoords>>(MeshPrimitive::VT_SPECULARTEXCOORD, specularTexCoord);
  }
  #[inline]
  pub fn add_normalTexCoord(&mut self, normalTexCoord: flatbuffers::WIPOffset<MeshTexCoords<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MeshTexCoords>>(MeshPrimitive::VT_NORMALTEXCOORD, normalTexCoord);
  }
  #[inline]
  pub fn add_roughMetalTexCoord(&mut self, roughMetalTexCoord: flatbuffers::WIPOffset<MeshTexCoords<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<MeshTexCoords>>(MeshPrimitive::VT_ROUGHMETALTEXCOORD, roughMetalTexCoord);
  }
  #[inline]
  pub fn add_otherTexCoord(&mut self, otherTexCoord: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<MeshTexCoords<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_OTHERTEXCOORD, otherTexCoord);
  }
  #[inline]
  pub fn add_materialIdx(&mut self, materialIdx: u64) {
    self.fbb_.push_slot::<u64>(MeshPrimitive::VT_MATERIALIDX, materialIdx, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MeshPrimitiveBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MeshPrimitiveBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MeshPrimitive<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for MeshPrimitive<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("MeshPrimitive");
      ds.field("vertexs", &self.vertexs());
      ds.field("normals", &self.normals());
      ds.field("triangles", &self.triangles());
      ds.field("normalMapMode", &self.normalMapMode());
      ds.field("diffuseTexCoord", &self.diffuseTexCoord());
      ds.field("ambientTexCoord", &self.ambientTexCoord());
      ds.field("specularTexCoord", &self.specularTexCoord());
      ds.field("normalTexCoord", &self.normalTexCoord());
      ds.field("roughMetalTexCoord", &self.roughMetalTexCoord());
      ds.field("otherTexCoord", &self.otherTexCoord());
      ds.field("materialIdx", &self.materialIdx());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MeshPrimitiveT {
  pub vertexs: Option<Vec<Vec3dT>>,
  pub normals: Option<Vec<Vec3dT>>,
  pub triangles: Option<Vec<TriangleIndexTupleT>>,
  pub normalMapMode: AttributeMapMode,
  pub diffuseTexCoord: Option<Box<MeshTexCoordsT>>,
  pub ambientTexCoord: Option<Box<MeshTexCoordsT>>,
  pub specularTexCoord: Option<Box<MeshTexCoordsT>>,
  pub normalTexCoord: Option<Box<MeshTexCoordsT>>,
  pub roughMetalTexCoord: Option<Box<MeshTexCoordsT>>,
  pub otherTexCoord: Option<Vec<MeshTexCoordsT>>,
  pub materialIdx: u64,
}
impl Default for MeshPrimitiveT {
  fn default() -> Self {
    Self {
      vertexs: None,
      normals: None,
      triangles: None,
      normalMapMode: AttributeMapMode::eNone,
      diffuseTexCoord: None,
      ambientTexCoord: None,
      specularTexCoord: None,
      normalTexCoord: None,
      roughMetalTexCoord: None,
      otherTexCoord: None,
      materialIdx: 0,
    }
  }
}
impl MeshPrimitiveT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<MeshPrimitive<'b>> {
    let vertexs = self.vertexs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    let normals = self.normals.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    let triangles = self.triangles.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack()).collect();_fbb.create_vector(&w)
    });
    let normalMapMode = self.normalMapMode;
    let diffuseTexCoord = self.diffuseTexCoord.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let ambientTexCoord = self.ambientTexCoord.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let specularTexCoord = self.specularTexCoord.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let normalTexCoord = self.normalTexCoord.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let roughMetalTexCoord = self.roughMetalTexCoord.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let otherTexCoord = self.otherTexCoord.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let materialIdx = self.materialIdx;
    MeshPrimitive::create(_fbb, &MeshPrimitiveArgs{
      vertexs,
      normals,
      triangles,
      normalMapMode,
      diffuseTexCoord,
      ambientTexCoord,
      specularTexCoord,
      normalTexCoord,
      roughMetalTexCoord,
      otherTexCoord,
      materialIdx,
    })
  }
}
}  // pub mod sf

