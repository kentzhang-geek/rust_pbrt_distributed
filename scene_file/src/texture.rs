// automatically generated by the FlatBuffers compiler, do not modify



use crate::common::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sf {

  use crate::common::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum TextureOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Texture<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Texture<'a> {
    type Inner = Texture<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Texture<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Texture { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args TextureArgs<'args>) -> flatbuffers::WIPOffset<Texture<'bldr>> {
      let mut builder = TextureBuilder::new(_fbb);
      builder.add_id(args.id);
      builder.add_components(args.components);
      builder.add_height(args.height);
      builder.add_width(args.width);
      if let Some(x) = args.data { builder.add_data(x); }
      if let Some(x) = args.media_name { builder.add_media_name(x); }
      if let Some(x) = args.file_name { builder.add_file_name(x); }
      builder.add_image_type(args.image_type);
      builder.add_pixel_type(args.pixel_type);
      builder.finish()
    }

    pub fn unpack(&self) -> TextureT {
      let id = self.id();
      let file_name = self.file_name().map(|x| {
        x.to_string()
      });
      let media_name = self.media_name().map(|x| {
        x.to_string()
      });
      let pixel_type = self.pixel_type();
      let image_type = self.image_type();
      let data = self.data().map(|x| {
        x.to_vec()
      });
      let width = self.width();
      let height = self.height();
      let components = self.components();
      TextureT {
        id,
        file_name,
        media_name,
        pixel_type,
        image_type,
        data,
        width,
        height,
        components,
      }
    }
    pub const VT_ID: flatbuffers::VOffsetT = 4;
    pub const VT_FILE_NAME: flatbuffers::VOffsetT = 6;
    pub const VT_MEDIA_NAME: flatbuffers::VOffsetT = 8;
    pub const VT_PIXEL_TYPE: flatbuffers::VOffsetT = 10;
    pub const VT_IMAGE_TYPE: flatbuffers::VOffsetT = 12;
    pub const VT_DATA: flatbuffers::VOffsetT = 14;
    pub const VT_WIDTH: flatbuffers::VOffsetT = 16;
    pub const VT_HEIGHT: flatbuffers::VOffsetT = 18;
    pub const VT_COMPONENTS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub fn id(&self) -> u64 {
    self._tab.get::<u64>(Texture::VT_ID, Some(0)).unwrap()
  }
  #[inline]
  pub fn file_name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Texture::VT_FILE_NAME, None)
  }
  #[inline]
  pub fn media_name(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Texture::VT_MEDIA_NAME, None)
  }
  #[inline]
  pub fn pixel_type(&self) -> PixelType {
    self._tab.get::<PixelType>(Texture::VT_PIXEL_TYPE, Some(PixelType::eNone)).unwrap()
  }
  #[inline]
  pub fn image_type(&self) -> ImageType {
    self._tab.get::<ImageType>(Texture::VT_IMAGE_TYPE, Some(ImageType::eNone)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Texture::VT_DATA, None).map(|v| v.safe_slice())
  }
  /// for raw image
  #[inline]
  pub fn width(&self) -> u32 {
    self._tab.get::<u32>(Texture::VT_WIDTH, Some(0)).unwrap()
  }
  #[inline]
  pub fn height(&self) -> u32 {
    self._tab.get::<u32>(Texture::VT_HEIGHT, Some(0)).unwrap()
  }
  #[inline]
  pub fn components(&self) -> u32 {
    self._tab.get::<u32>(Texture::VT_COMPONENTS, Some(0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Texture<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"file_name", Self::VT_FILE_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"media_name", Self::VT_MEDIA_NAME, false)?
     .visit_field::<PixelType>(&"pixel_type", Self::VT_PIXEL_TYPE, false)?
     .visit_field::<ImageType>(&"image_type", Self::VT_IMAGE_TYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(&"data", Self::VT_DATA, false)?
     .visit_field::<u32>(&"width", Self::VT_WIDTH, false)?
     .visit_field::<u32>(&"height", Self::VT_HEIGHT, false)?
     .visit_field::<u32>(&"components", Self::VT_COMPONENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct TextureArgs<'a> {
    pub id: u64,
    pub file_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub media_name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pixel_type: PixelType,
    pub image_type: ImageType,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub width: u32,
    pub height: u32,
    pub components: u32,
}
impl<'a> Default for TextureArgs<'a> {
    #[inline]
    fn default() -> Self {
        TextureArgs {
            id: 0,
            file_name: None,
            media_name: None,
            pixel_type: PixelType::eNone,
            image_type: ImageType::eNone,
            data: None,
            width: 0,
            height: 0,
            components: 0,
        }
    }
}
pub struct TextureBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> TextureBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Texture::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_file_name(&mut self, file_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Texture::VT_FILE_NAME, file_name);
  }
  #[inline]
  pub fn add_media_name(&mut self, media_name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Texture::VT_MEDIA_NAME, media_name);
  }
  #[inline]
  pub fn add_pixel_type(&mut self, pixel_type: PixelType) {
    self.fbb_.push_slot::<PixelType>(Texture::VT_PIXEL_TYPE, pixel_type, PixelType::eNone);
  }
  #[inline]
  pub fn add_image_type(&mut self, image_type: ImageType) {
    self.fbb_.push_slot::<ImageType>(Texture::VT_IMAGE_TYPE, image_type, ImageType::eNone);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Texture::VT_DATA, data);
  }
  #[inline]
  pub fn add_width(&mut self, width: u32) {
    self.fbb_.push_slot::<u32>(Texture::VT_WIDTH, width, 0);
  }
  #[inline]
  pub fn add_height(&mut self, height: u32) {
    self.fbb_.push_slot::<u32>(Texture::VT_HEIGHT, height, 0);
  }
  #[inline]
  pub fn add_components(&mut self, components: u32) {
    self.fbb_.push_slot::<u32>(Texture::VT_COMPONENTS, components, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> TextureBuilder<'a, 'b> {
    let start = _fbb.start_table();
    TextureBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Texture<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Texture<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Texture");
      ds.field("id", &self.id());
      ds.field("file_name", &self.file_name());
      ds.field("media_name", &self.media_name());
      ds.field("pixel_type", &self.pixel_type());
      ds.field("image_type", &self.image_type());
      ds.field("data", &self.data());
      ds.field("width", &self.width());
      ds.field("height", &self.height());
      ds.field("components", &self.components());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TextureT {
  pub id: u64,
  pub file_name: Option<String>,
  pub media_name: Option<String>,
  pub pixel_type: PixelType,
  pub image_type: ImageType,
  pub data: Option<Vec<u8>>,
  pub width: u32,
  pub height: u32,
  pub components: u32,
}
impl Default for TextureT {
  fn default() -> Self {
    Self {
      id: 0,
      file_name: None,
      media_name: None,
      pixel_type: PixelType::eNone,
      image_type: ImageType::eNone,
      data: None,
      width: 0,
      height: 0,
      components: 0,
    }
  }
}
impl TextureT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<Texture<'b>> {
    let id = self.id;
    let file_name = self.file_name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let media_name = self.media_name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pixel_type = self.pixel_type;
    let image_type = self.image_type;
    let data = self.data.as_ref().map(|x|{
      _fbb.create_vector(x)
    });
    let width = self.width;
    let height = self.height;
    let components = self.components;
    Texture::create(_fbb, &TextureArgs{
      id,
      file_name,
      media_name,
      pixel_type,
      image_type,
      data,
      width,
      height,
      components,
    })
  }
}
}  // pub mod sf

