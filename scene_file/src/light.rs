// automatically generated by the FlatBuffers compiler, do not modify



use crate::common::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sf {

  use crate::common::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LIGHT_TYPE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LIGHT_TYPE: u8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LIGHT_TYPE: [LightType; 5] = [
  LightType::eNone,
  LightType::eDirection,
  LightType::ePoint,
  LightType::eSpot,
  LightType::eArea,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LightType(pub u8);
#[allow(non_upper_case_globals)]
impl LightType {
  pub const eNone: Self = Self(0);
  pub const eDirection: Self = Self(1);
  pub const ePoint: Self = Self(2);
  pub const eSpot: Self = Self(3);
  pub const eArea: Self = Self(4);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::eNone,
    Self::eDirection,
    Self::ePoint,
    Self::eSpot,
    Self::eArea,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::eNone => Some("eNone"),
      Self::eDirection => Some("eDirection"),
      Self::ePoint => Some("ePoint"),
      Self::eSpot => Some("eSpot"),
      Self::eArea => Some("eArea"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for LightType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LightType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for LightType {
    type Output = LightType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for LightType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LightType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LightType {}
pub enum LightOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Light<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Light<'a> {
    type Inner = Light<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Light<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Light { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args LightArgs<'args>) -> flatbuffers::WIPOffset<Light<'bldr>> {
      let mut builder = LightBuilder::new(_fbb);
      builder.add_outerAngle(args.outerAngle);
      builder.add_innerAngle(args.innerAngle);
      builder.add_intensity(args.intensity);
      if let Some(x) = args.color { builder.add_color(x); }
      if let Some(x) = args.global_transform { builder.add_global_transform(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.add_type_(args.type_);
      builder.finish()
    }

    pub fn unpack(&self) -> LightT {
      let name = {
        let x = self.name();
        x.to_string()
      };
      let type_ = self.type_();
      let global_transform = {
        let x = self.global_transform();
        x.unpack()
      };
      let color = self.color().map(|x| {
        x.unpack()
      });
      let intensity = self.intensity();
      let innerAngle = self.innerAngle();
      let outerAngle = self.outerAngle();
      LightT {
        name,
        type_,
        global_transform,
        color,
        intensity,
        innerAngle,
        outerAngle,
      }
    }
    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
    pub const VT_GLOBAL_TRANSFORM: flatbuffers::VOffsetT = 8;
    pub const VT_COLOR: flatbuffers::VOffsetT = 10;
    pub const VT_INTENSITY: flatbuffers::VOffsetT = 12;
    pub const VT_INNERANGLE: flatbuffers::VOffsetT = 14;
    pub const VT_OUTERANGLE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Light::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn type_(&self) -> LightType {
    self._tab.get::<LightType>(Light::VT_TYPE_, Some(LightType::eNone)).unwrap()
  }
  #[inline]
  pub fn global_transform(&self) -> &'a Matrix44d {
    self._tab.get::<Matrix44d>(Light::VT_GLOBAL_TRANSFORM, None).unwrap()
  }
  #[inline]
  pub fn color(&self) -> Option<&'a Vec3d> {
    self._tab.get::<Vec3d>(Light::VT_COLOR, None)
  }
  #[inline]
  pub fn intensity(&self) -> f64 {
    self._tab.get::<f64>(Light::VT_INTENSITY, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn innerAngle(&self) -> f64 {
    self._tab.get::<f64>(Light::VT_INNERANGLE, Some(0.0)).unwrap()
  }
  #[inline]
  pub fn outerAngle(&self) -> f64 {
    self._tab.get::<f64>(Light::VT_OUTERANGLE, Some(0.0)).unwrap()
  }
}

impl flatbuffers::Verifiable for Light<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"name", Self::VT_NAME, true)?
     .visit_field::<LightType>(&"type_", Self::VT_TYPE_, false)?
     .visit_field::<Matrix44d>(&"global_transform", Self::VT_GLOBAL_TRANSFORM, true)?
     .visit_field::<Vec3d>(&"color", Self::VT_COLOR, false)?
     .visit_field::<f64>(&"intensity", Self::VT_INTENSITY, false)?
     .visit_field::<f64>(&"innerAngle", Self::VT_INNERANGLE, false)?
     .visit_field::<f64>(&"outerAngle", Self::VT_OUTERANGLE, false)?
     .finish();
    Ok(())
  }
}
pub struct LightArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: LightType,
    pub global_transform: Option<&'a Matrix44d>,
    pub color: Option<&'a Vec3d>,
    pub intensity: f64,
    pub innerAngle: f64,
    pub outerAngle: f64,
}
impl<'a> Default for LightArgs<'a> {
    #[inline]
    fn default() -> Self {
        LightArgs {
            name: None, // required field
            type_: LightType::eNone,
            global_transform: None, // required field
            color: None,
            intensity: 0.0,
            innerAngle: 0.0,
            outerAngle: 0.0,
        }
    }
}
pub struct LightBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LightBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Light::VT_NAME, name);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: LightType) {
    self.fbb_.push_slot::<LightType>(Light::VT_TYPE_, type_, LightType::eNone);
  }
  #[inline]
  pub fn add_global_transform(&mut self, global_transform: &Matrix44d) {
    self.fbb_.push_slot_always::<&Matrix44d>(Light::VT_GLOBAL_TRANSFORM, global_transform);
  }
  #[inline]
  pub fn add_color(&mut self, color: &Vec3d) {
    self.fbb_.push_slot_always::<&Vec3d>(Light::VT_COLOR, color);
  }
  #[inline]
  pub fn add_intensity(&mut self, intensity: f64) {
    self.fbb_.push_slot::<f64>(Light::VT_INTENSITY, intensity, 0.0);
  }
  #[inline]
  pub fn add_innerAngle(&mut self, innerAngle: f64) {
    self.fbb_.push_slot::<f64>(Light::VT_INNERANGLE, innerAngle, 0.0);
  }
  #[inline]
  pub fn add_outerAngle(&mut self, outerAngle: f64) {
    self.fbb_.push_slot::<f64>(Light::VT_OUTERANGLE, outerAngle, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LightBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LightBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Light<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Light::VT_NAME,"name");
    self.fbb_.required(o, Light::VT_GLOBAL_TRANSFORM,"global_transform");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Light<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Light");
      ds.field("name", &self.name());
      ds.field("type_", &self.type_());
      ds.field("global_transform", &self.global_transform());
      ds.field("color", &self.color());
      ds.field("intensity", &self.intensity());
      ds.field("innerAngle", &self.innerAngle());
      ds.field("outerAngle", &self.outerAngle());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LightT {
  pub name: String,
  pub type_: LightType,
  pub global_transform: Matrix44dT,
  pub color: Option<Vec3dT>,
  pub intensity: f64,
  pub innerAngle: f64,
  pub outerAngle: f64,
}
impl Default for LightT {
  fn default() -> Self {
    Self {
      name: "".to_string(),
      type_: LightType::eNone,
      global_transform: Default::default(),
      color: None,
      intensity: 0.0,
      innerAngle: 0.0,
      outerAngle: 0.0,
    }
  }
}
impl LightT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<Light<'b>> {
    let name = Some({
      let x = &self.name;
      _fbb.create_string(x)
    });
    let type_ = self.type_;
    let global_transform_tmp = Some(self.global_transform.pack());
    let global_transform = global_transform_tmp.as_ref();
    let color_tmp = self.color.as_ref().map(|x| x.pack());
    let color = color_tmp.as_ref();
    let intensity = self.intensity;
    let innerAngle = self.innerAngle;
    let outerAngle = self.outerAngle;
    Light::create(_fbb, &LightArgs{
      name,
      type_,
      global_transform,
      color,
      intensity,
      innerAngle,
      outerAngle,
    })
  }
}
}  // pub mod sf

