// automatically generated by the FlatBuffers compiler, do not modify



use crate::common::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sf {

  use crate::common::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum CameraOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Camera<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Camera<'a> {
    type Inner = Camera<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Camera<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Camera { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args CameraArgs<'args>) -> flatbuffers::WIPOffset<Camera<'bldr>> {
      let mut builder = CameraBuilder::new(_fbb);
      if let Some(x) = args.upAxis { builder.add_upAxis(x); }
      if let Some(x) = args.center { builder.add_center(x); }
      if let Some(x) = args.eye { builder.add_eye(x); }
      if let Some(x) = args.name { builder.add_name(x); }
      builder.finish()
    }

    pub fn unpack(&self) -> CameraT {
      let name = {
        let x = self.name();
        x.to_string()
      };
      let eye = {
        let x = self.eye();
        x.unpack()
      };
      let center = {
        let x = self.center();
        x.unpack()
      };
      let upAxis = {
        let x = self.upAxis();
        x.unpack()
      };
      CameraT {
        name,
        eye,
        center,
        upAxis,
      }
    }
    pub const VT_NAME: flatbuffers::VOffsetT = 4;
    pub const VT_EYE: flatbuffers::VOffsetT = 6;
    pub const VT_CENTER: flatbuffers::VOffsetT = 8;
    pub const VT_UPAXIS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn name(&self) -> &'a str {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Camera::VT_NAME, None).unwrap()
  }
  #[inline]
  pub fn eye(&self) -> &'a Vec3d {
    self._tab.get::<Vec3d>(Camera::VT_EYE, None).unwrap()
  }
  #[inline]
  pub fn center(&self) -> &'a Vec3d {
    self._tab.get::<Vec3d>(Camera::VT_CENTER, None).unwrap()
  }
  #[inline]
  pub fn upAxis(&self) -> &'a Vec3d {
    self._tab.get::<Vec3d>(Camera::VT_UPAXIS, None).unwrap()
  }
}

impl flatbuffers::Verifiable for Camera<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>(&"name", Self::VT_NAME, true)?
     .visit_field::<Vec3d>(&"eye", Self::VT_EYE, true)?
     .visit_field::<Vec3d>(&"center", Self::VT_CENTER, true)?
     .visit_field::<Vec3d>(&"upAxis", Self::VT_UPAXIS, true)?
     .finish();
    Ok(())
  }
}
pub struct CameraArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eye: Option<&'a Vec3d>,
    pub center: Option<&'a Vec3d>,
    pub upAxis: Option<&'a Vec3d>,
}
impl<'a> Default for CameraArgs<'a> {
    #[inline]
    fn default() -> Self {
        CameraArgs {
            name: None, // required field
            eye: None, // required field
            center: None, // required field
            upAxis: None, // required field
        }
    }
}
pub struct CameraBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> CameraBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Camera::VT_NAME, name);
  }
  #[inline]
  pub fn add_eye(&mut self, eye: &Vec3d) {
    self.fbb_.push_slot_always::<&Vec3d>(Camera::VT_EYE, eye);
  }
  #[inline]
  pub fn add_center(&mut self, center: &Vec3d) {
    self.fbb_.push_slot_always::<&Vec3d>(Camera::VT_CENTER, center);
  }
  #[inline]
  pub fn add_upAxis(&mut self, upAxis: &Vec3d) {
    self.fbb_.push_slot_always::<&Vec3d>(Camera::VT_UPAXIS, upAxis);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> CameraBuilder<'a, 'b> {
    let start = _fbb.start_table();
    CameraBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Camera<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, Camera::VT_NAME,"name");
    self.fbb_.required(o, Camera::VT_EYE,"eye");
    self.fbb_.required(o, Camera::VT_CENTER,"center");
    self.fbb_.required(o, Camera::VT_UPAXIS,"upAxis");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Camera<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Camera");
      ds.field("name", &self.name());
      ds.field("eye", &self.eye());
      ds.field("center", &self.center());
      ds.field("upAxis", &self.upAxis());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CameraT {
  pub name: String,
  pub eye: Vec3dT,
  pub center: Vec3dT,
  pub upAxis: Vec3dT,
}
impl Default for CameraT {
  fn default() -> Self {
    Self {
      name: "".to_string(),
      eye: Default::default(),
      center: Default::default(),
      upAxis: Default::default(),
    }
  }
}
impl CameraT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<Camera<'b>> {
    let name = Some({
      let x = &self.name;
      _fbb.create_string(x)
    });
    let eye_tmp = Some(self.eye.pack());
    let eye = eye_tmp.as_ref();
    let center_tmp = Some(self.center.pack());
    let center = center_tmp.as_ref();
    let upAxis_tmp = Some(self.upAxis.pack());
    let upAxis = upAxis_tmp.as_ref();
    Camera::create(_fbb, &CameraArgs{
      name,
      eye,
      center,
      upAxis,
    })
  }
}
}  // pub mod sf

