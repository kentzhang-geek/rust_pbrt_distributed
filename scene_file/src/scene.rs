// automatically generated by the FlatBuffers compiler, do not modify



use crate::common::*;
use crate::texture::*;
use crate::bvh_accel::*;
use crate::camera::*;
use crate::material::*;
use crate::light::*;
use crate::mesh_primitive::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod sf {

  use crate::common::*;
  use crate::texture::*;
  use crate::bvh_accel::*;
  use crate::camera::*;
  use crate::material::*;
  use crate::light::*;
  use crate::mesh_primitive::*;
  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum SceneOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Scene<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Scene<'a> {
    type Inner = Scene<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> Scene<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Scene { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args SceneArgs<'args>) -> flatbuffers::WIPOffset<Scene<'bldr>> {
      let mut builder = SceneBuilder::new(_fbb);
      if let Some(x) = args.lights { builder.add_lights(x); }
      if let Some(x) = args.cameras { builder.add_cameras(x); }
      if let Some(x) = args.materials { builder.add_materials(x); }
      if let Some(x) = args.root { builder.add_root(x); }
      builder.finish()
    }

    pub fn unpack(&self) -> SceneT {
      let root = self.root().map(|x| {
        Box::new(x.unpack())
      });
      let materials = self.materials().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let cameras = self.cameras().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      let lights = self.lights().map(|x| {
        x.iter().map(|t| t.unpack()).collect()
      });
      SceneT {
        root,
        materials,
        cameras,
        lights,
      }
    }
    pub const VT_ROOT: flatbuffers::VOffsetT = 4;
    pub const VT_MATERIALS: flatbuffers::VOffsetT = 6;
    pub const VT_CAMERAS: flatbuffers::VOffsetT = 8;
    pub const VT_LIGHTS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub fn root(&self) -> Option<BVHNode<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<BVHNode>>(Scene::VT_ROOT, None)
  }
  #[inline]
  pub fn materials(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Material<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Material>>>>(Scene::VT_MATERIALS, None)
  }
  #[inline]
  pub fn cameras(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Camera<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Camera>>>>(Scene::VT_CAMERAS, None)
  }
  #[inline]
  pub fn lights(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Light<'a>>>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Light>>>>(Scene::VT_LIGHTS, None)
  }
}

impl flatbuffers::Verifiable for Scene<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<BVHNode>>(&"root", Self::VT_ROOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Material>>>>(&"materials", Self::VT_MATERIALS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Camera>>>>(&"cameras", Self::VT_CAMERAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Light>>>>(&"lights", Self::VT_LIGHTS, false)?
     .finish();
    Ok(())
  }
}
pub struct SceneArgs<'a> {
    pub root: Option<flatbuffers::WIPOffset<BVHNode<'a>>>,
    pub materials: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Material<'a>>>>>,
    pub cameras: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Camera<'a>>>>>,
    pub lights: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Light<'a>>>>>,
}
impl<'a> Default for SceneArgs<'a> {
    #[inline]
    fn default() -> Self {
        SceneArgs {
            root: None,
            materials: None,
            cameras: None,
            lights: None,
        }
    }
}
pub struct SceneBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> SceneBuilder<'a, 'b> {
  #[inline]
  pub fn add_root(&mut self, root: flatbuffers::WIPOffset<BVHNode<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<BVHNode>>(Scene::VT_ROOT, root);
  }
  #[inline]
  pub fn add_materials(&mut self, materials: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Material<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Scene::VT_MATERIALS, materials);
  }
  #[inline]
  pub fn add_cameras(&mut self, cameras: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Camera<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Scene::VT_CAMERAS, cameras);
  }
  #[inline]
  pub fn add_lights(&mut self, lights: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Light<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Scene::VT_LIGHTS, lights);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SceneBuilder<'a, 'b> {
    let start = _fbb.start_table();
    SceneBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Scene<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for Scene<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("Scene");
      ds.field("root", &self.root());
      ds.field("materials", &self.materials());
      ds.field("cameras", &self.cameras());
      ds.field("lights", &self.lights());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SceneT {
  pub root: Option<Box<BVHNodeT>>,
  pub materials: Option<Vec<MaterialT>>,
  pub cameras: Option<Vec<CameraT>>,
  pub lights: Option<Vec<LightT>>,
}
impl Default for SceneT {
  fn default() -> Self {
    Self {
      root: None,
      materials: None,
      cameras: None,
      lights: None,
    }
  }
}
impl SceneT {
  pub fn pack<'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b>
  ) -> flatbuffers::WIPOffset<Scene<'b>> {
    let root = self.root.as_ref().map(|x|{
      x.pack(_fbb)
    });
    let materials = self.materials.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let cameras = self.cameras.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    let lights = self.lights.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|t| t.pack(_fbb)).collect();_fbb.create_vector(&w)
    });
    Scene::create(_fbb, &SceneArgs{
      root,
      materials,
      cameras,
      lights,
    })
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_scene<'a>(buf: &'a [u8]) -> Scene<'a> {
  unsafe { flatbuffers::root_unchecked::<Scene<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_scene<'a>(buf: &'a [u8]) -> Scene<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<Scene<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `Scene`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scene_unchecked`.
pub fn root_as_scene(buf: &[u8]) -> Result<Scene, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Scene>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Scene` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_scene_unchecked`.
pub fn size_prefixed_root_as_scene(buf: &[u8]) -> Result<Scene, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Scene>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Scene` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scene_unchecked`.
pub fn root_as_scene_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Scene<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Scene<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Scene` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_scene_unchecked`.
pub fn size_prefixed_root_as_scene_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Scene<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Scene<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Scene and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Scene`.
pub unsafe fn root_as_scene_unchecked(buf: &[u8]) -> Scene {
  flatbuffers::root_unchecked::<Scene>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Scene and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Scene`.
pub unsafe fn size_prefixed_root_as_scene_unchecked(buf: &[u8]) -> Scene {
  flatbuffers::size_prefixed_root_unchecked::<Scene>(buf)
}
#[inline]
pub fn finish_scene_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Scene<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_scene_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Scene<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod sf

