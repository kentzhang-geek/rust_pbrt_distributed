// automatically generated by the FlatBuffers compiler, do not modify



use super::common_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

// struct TriangleIndexTuple, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct TriangleIndexTuple(pub [u8; 12]);
impl Default for TriangleIndexTuple { 
  fn default() -> Self { 
    Self([0; 12])
  }
}
impl std::fmt::Debug for TriangleIndexTuple {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("TriangleIndexTuple")
      .field("idx", &self.idx())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TriangleIndexTuple {}
impl flatbuffers::SafeSliceAccess for TriangleIndexTuple {}
impl<'a> flatbuffers::Follow<'a> for TriangleIndexTuple {
  type Inner = &'a TriangleIndexTuple;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a TriangleIndexTuple>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a TriangleIndexTuple {
  type Inner = &'a TriangleIndexTuple;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<TriangleIndexTuple>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for TriangleIndexTuple {
    type Output = TriangleIndexTuple;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const TriangleIndexTuple as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b TriangleIndexTuple {
    type Output = TriangleIndexTuple;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const TriangleIndexTuple as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for TriangleIndexTuple {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl<'a> TriangleIndexTuple {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    idx: &[i32; 3],
  ) -> Self {
    let mut s = Self([0; 12]);
    s.set_idx(&idx);
    s
  }

  pub fn idx(&'a self) -> flatbuffers::Array<'a, i32, 3> {
    flatbuffers::Array::follow(&self.0, 0)
  }

  pub fn set_idx(&mut self, items: &[i32; 3]) {
    flatbuffers::emplace_scalar_array(&mut self.0, 0, items);
  }

}

pub enum MeshPrimitiveOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MeshPrimitive<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MeshPrimitive<'a> {
    type Inner = MeshPrimitive<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> MeshPrimitive<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MeshPrimitive { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MeshPrimitiveArgs<'args>) -> flatbuffers::WIPOffset<MeshPrimitive<'bldr>> {
      let mut builder = MeshPrimitiveBuilder::new(_fbb);
      if let Some(x) = args.triangles { builder.add_triangles(x); }
      if let Some(x) = args.vertexs { builder.add_vertexs(x); }
      builder.finish()
    }

    pub const VT_VERTEXS: flatbuffers::VOffsetT = 4;
    pub const VT_TRIANGLES: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn vertexs(&self) -> Option<&'a [Vec3d]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, Vec3d>>>(MeshPrimitive::VT_VERTEXS, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn triangles(&self) -> Option<&'a [TriangleIndexTuple]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, TriangleIndexTuple>>>(MeshPrimitive::VT_TRIANGLES, None).map(|v| v.safe_slice())
  }
}

impl flatbuffers::Verifiable for MeshPrimitive<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, Vec3d>>>(&"vertexs", Self::VT_VERTEXS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, TriangleIndexTuple>>>(&"triangles", Self::VT_TRIANGLES, false)?
     .finish();
    Ok(())
  }
}
pub struct MeshPrimitiveArgs<'a> {
    pub vertexs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, Vec3d>>>,
    pub triangles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, TriangleIndexTuple>>>,
}
impl<'a> Default for MeshPrimitiveArgs<'a> {
    #[inline]
    fn default() -> Self {
        MeshPrimitiveArgs {
            vertexs: None,
            triangles: None,
        }
    }
}
pub struct MeshPrimitiveBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MeshPrimitiveBuilder<'a, 'b> {
  #[inline]
  pub fn add_vertexs(&mut self, vertexs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Vec3d>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_VERTEXS, vertexs);
  }
  #[inline]
  pub fn add_triangles(&mut self, triangles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , TriangleIndexTuple>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MeshPrimitive::VT_TRIANGLES, triangles);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MeshPrimitiveBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MeshPrimitiveBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MeshPrimitive<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for MeshPrimitive<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("MeshPrimitive");
      ds.field("vertexs", &self.vertexs());
      ds.field("triangles", &self.triangles());
      ds.finish()
  }
}
