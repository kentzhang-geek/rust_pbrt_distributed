// automatically generated by the FlatBuffers compiler, do not modify



use super::common_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum BVHAccelOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BVHAccel<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BVHAccel<'a> {
    type Inner = BVHAccel<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> BVHAccel<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BVHAccel { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        _args: &'args BVHAccelArgs) -> flatbuffers::WIPOffset<BVHAccel<'bldr>> {
      let mut builder = BVHAccelBuilder::new(_fbb);
      builder.finish()
    }

}

impl flatbuffers::Verifiable for BVHAccel<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct BVHAccelArgs {
}
impl<'a> Default for BVHAccelArgs {
    #[inline]
    fn default() -> Self {
        BVHAccelArgs {
        }
    }
}
pub struct BVHAccelBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BVHAccelBuilder<'a, 'b> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BVHAccelBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BVHAccelBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BVHAccel<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for BVHAccel<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("BVHAccel");
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_bvhaccel<'a>(buf: &'a [u8]) -> BVHAccel<'a> {
  unsafe { flatbuffers::root_unchecked::<BVHAccel<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_bvhaccel<'a>(buf: &'a [u8]) -> BVHAccel<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<BVHAccel<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `BVHAccel`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bvhaccel_unchecked`.
pub fn root_as_bvhaccel(buf: &[u8]) -> Result<BVHAccel, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BVHAccel>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BVHAccel` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_bvhaccel_unchecked`.
pub fn size_prefixed_root_as_bvhaccel(buf: &[u8]) -> Result<BVHAccel, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BVHAccel>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BVHAccel` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bvhaccel_unchecked`.
pub fn root_as_bvhaccel_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BVHAccel<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BVHAccel<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BVHAccel` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_bvhaccel_unchecked`.
pub fn size_prefixed_root_as_bvhaccel_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BVHAccel<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BVHAccel<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BVHAccel and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BVHAccel`.
pub unsafe fn root_as_bvhaccel_unchecked(buf: &[u8]) -> BVHAccel {
  flatbuffers::root_unchecked::<BVHAccel>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BVHAccel and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BVHAccel`.
pub unsafe fn size_prefixed_root_as_bvhaccel_unchecked(buf: &[u8]) -> BVHAccel {
  flatbuffers::size_prefixed_root_unchecked::<BVHAccel>(buf)
}
#[inline]
pub fn finish_bvhaccel_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<BVHAccel<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_bvhaccel_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<BVHAccel<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
